# # 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# # Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# # соответствующий количеству ячеек клетки (целое число).
# # В классе должны быть реализованы методы перегрузки арифметических операторов:
# # сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# # Данные методы должны применяться только к клеткам и выполнять увеличение,
# # уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
#
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
#
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****
class Cell:

    def __init__(self, cellule):
        self.cellule = cellule

    def __add__(self, other):
        return Cell(self.cellule + other.cellule)

    def __sub__(self, other):
        if self.cellule > other.cellule:
            return Cell(self.cellule - other.cellule)
        else:
            print('Вычитание клеток невозможно!')

    def __mul__(self, other):
        return Cell(self.cellule * other.cellule)

    def __truediv__(self, other):
        return Cell(round(self.cellule / other.cellule))

    def make_order(self, row):
        render = ['*' * row for _ in range(self.cellule // row)]
        render.append('*' * (self.cellule % row))
        return f'\n'.join(render)


cell_1 = Cell(10)
cell_2 = Cell(15)

cell_3 = cell_1 + cell_2
cell_5 = cell_1 * cell_2
cell_6 = cell_5 / cell_2

if not isinstance(cell_1 - cell_2, Cell):
    cell_4 = cell_2 - cell_1
else:
    cell_4 = cell_1 - cell_2

print(f'Клетка №1. Количество ячеек в ряду: 5. Всего ячеек: {cell_1.cellule}\n{cell_1.make_order(5)}')
print(f'Клетка №2. Количество ячеек в ряду: 3. Всего ячеек: {cell_2.cellule}\n{cell_2.make_order(3)}')
print(f'Клетка №3. Количество ячеек в ряду: 8. Всего ячеек: {cell_3.cellule}\n{cell_3.make_order(8)}')

print(f'Клетка №4. Количество ячеек в ряду: 4. Всего ячеек: {cell_4.cellule}\n{cell_4.make_order(4)}')

print(f'Клетка №5. Количество ячеек в ряду: 20. Всего ячеек: {cell_5.cellule}\n{cell_5.make_order(20)}')
print(f'Клетка №6. Количество ячеек в ряду: 2. Всего ячеек: {cell_6.cellule}\n{cell_6.make_order(2)}')
